group java;

/*Definição da estrutura geral do programa C++*/
program(funcs) ::= <<
#include \<iostream>
#include \<tuple>

using namespace std;

<funcs; separator="\n\n">

int main(int argc, char* argv[]) {
    cout \<\< boolalpha;
    main_aux();
}
>>

/*Estrutura geral das funções do programa*/
func(types, name, params, cmds) ::= <<
<if(types)>
tuple\< <types; separator=", "> > <name>(<params; separator=", ">) {
<else>
void <name>(<params; separator=", ">) {
<endif>
    <if(cmds)>
    <cmds; separator=";\n">;
    <endif>
}
>>


/*Declaração das variáveis no início das funções.*/
var_decl(type, name) ::= <<
<type> <name>
>>

/*Atribuição de valor a variável.*/
attr(var, expr) ::= <<
<var> = <expr>
>>

/*Parâmetro das funções*/
param(type, name) ::= "<type> <name>"

/*Nome dos tipos no formato do do C++*/
int_type() ::= "int"
float_type() ::= "float"
bool_type() ::= "bool"
char_type() ::= "char"

/*Impressão de valor*/
print(expr) ::= "cout \<\< <expr>"

/*Usando variavel simples*/
id(name) ::= "<name>"

/*Comandos de OPERAÇÕES*/
mul_expr(left_expr, right_expr) ::= "(<left_expr> * <right_expr>)"
div_expr(left_expr, right_expr) ::= "(<left_expr> / <right_expr>)"
mod_expr(left_expr, right_expr) ::= "(<left_expr> % <right_expr>)"
add_expr(left_expr, right_expr) ::= "(<left_expr> + <right_expr>)"
sub_expr(left_expr, right_expr) ::= "(<left_expr> - <right_expr>)"
lt_expr(left_expr, right_expr) ::= "(<left_expr> \< <right_expr>)"
equals_expr(left_expr, right_expr) ::= "(<left_expr> == <right_expr>)"
diff_expr(left_expr, right_expr) ::= "(<left_expr> != <right_expr>)"
and_expr(left_expr, right_expr) ::= "(<left_expr> && <right_expr>)"
not_expr(expr) ::= "!<expr>"
minus_expr(expr) ::= "-<expr>"

/*Valores*/
boolean_expr(value) ::= "<value>"
float_expr(value) ::= "<value>"
int_expr(value) ::= "<value>"
null_expr(value) ::= "<value>"
char_expr(value) ::= "<value>"
char_expr_num(value) ::= "static_cast\<char>(<value>)"

return(expr) ::= "return <expr>;"

while(expr, stmt) ::= <<
while(<expr>) {
    <stmt>
}
>>

if(expr, thn, els) ::= <<
if(<expr>) {
    <thn>
} <if(els)>else {
    <els>
}
<endif>
>>

stmt_list(stmt1, stmt2) ::= <<
<stmt1>
<stmt2>
>>


lvalue(name, array) ::= "<name><array>"
array_access(expr) ::= "[<expr>]"



new_array(var, type, expr) ::= "<var> = new <type>[<expr>];"

call(name, args) ::= <<<name>(<args; separator=", ">)>>


